// ‚úÖ ARQUIVO ATUALIZADO: src/utils/userUtils.js
// Mantendo suas fun√ß√µes existentes + adicionando as novas para admin/gestor

import { supabase } from './supabaseClient';

/**
 * ‚úÖ CACHE SIMPLIFICADO PARA EVITAR M√öLTIPLAS VERIFICA√á√ïES
 */
let userStatusCache = new Map();
let ongoingVerifications = new Map();

/**
 * ‚úÖ LIMPA O CACHE DE STATUS DE USU√ÅRIO
 */
export const clearUserStatusCache = () => {
  userStatusCache.clear();
  ongoingVerifications.clear();
};

/**
 * ‚úÖ VERS√ÉO ULTRA SIMPLIFICADA PARA VERIFICAR SE USU√ÅRIO EST√Å ATIVO
 * @param {string} userId - ID do usu√°rio a ser verificado
 * @returns {Promise<boolean>} - true se ativo, false caso contr√°rio
 */
export const isUserActive = async (userId) => {
  try {
    if (!userId) {
      console.log('UserID n√£o fornecido, retornando true por padr√£o');
      return true;
    }
    
    // ‚úÖ VERIFICAR SE J√Å EXISTE UMA VERIFICA√á√ÉO EM ANDAMENTO
    if (ongoingVerifications.has(userId)) {
      console.log('Verifica√ß√£o em andamento, aguardando resultado...');
      return await ongoingVerifications.get(userId);
    }
    
    // ‚úÖ VERIFICAR CACHE (V√ÅLIDO POR 2 MINUTOS)
    const cached = userStatusCache.get(userId);
    if (cached && (Date.now() - cached.timestamp) < 120000) {
      console.log('Usando status em cache para usu√°rio:', userId.substring(0, 8));
      return cached.status;
    }
    
    console.log("Verificando status de usu√°rio:", userId.substring(0, 8));
    
    // ‚úÖ CRIAR PROMISE PARA EVITAR M√öLTIPLAS VERIFICA√á√ïES SIMULT√ÇNEAS
    const verificationPromise = performUserVerificationSimple(userId);
    ongoingVerifications.set(userId, verificationPromise);
    
    try {
      const result = await verificationPromise;
      
      // ‚úÖ SALVAR NO CACHE
      userStatusCache.set(userId, {
        status: result,
        timestamp: Date.now()
      });
      
      return result;
    } finally {
      // ‚úÖ LIMPAR VERIFICA√á√ÉO EM ANDAMENTO
      ongoingVerifications.delete(userId);
    }
    
  } catch (error) {
    console.error('Erro ao verificar status do usu√°rio:', error.message);
    
    // ‚úÖ EM CASO DE ERRO, SEMPRE PERMITIR ACESSO POR SEGURAN√áA
    console.warn('Permitindo acesso por seguran√ßa devido ao erro');
    return true;
  }
};

/**
 * ‚úÖ FUN√á√ÉO INTERNA SIMPLIFICADA PARA VERIFICA√á√ÉO
 * @param {string} userId 
 * @returns {Promise<boolean>}
 */
const performUserVerificationSimple = async (userId) => {
  const timeoutDuration = 5000; // 5 segundos apenas
  
  try {
    console.log(`Fazendo verifica√ß√£o de status para usu√°rio ${userId.substring(0, 8)}`);
    
    // ‚úÖ TIMEOUT CONTROLLER SIMPLES
    const controller = new AbortController();
    const timeoutId = setTimeout(() => {
      controller.abort();
    }, timeoutDuration);
    
    // ‚úÖ QUERY SIMPLIFICADA
    const { data, error } = await supabase
      .from('usuarios')
      .select('ativo')
      .eq('id', userId)
      .abortSignal(controller.signal)
      .single();
      
    clearTimeout(timeoutId);
      
    if (error) {
      console.error(`Erro na verifica√ß√£o:`, error.message);
      
      // ‚úÖ PARA QUALQUER ERRO, PERMITIR ACESSO
      console.warn('Erro na query, permitindo acesso por seguran√ßa');
      return true;
    }
    
    console.log("Status obtido:", data?.ativo);
    
    // ‚úÖ RETORNAR TRUE SE N√ÉO HOUVER DADOS OU SE ATIVO N√ÉO FOR EXPLICITAMENTE FALSE
    if (!data) {
      console.log('Nenhum dado retornado, permitindo acesso');
      return true;
    }
    
    // ‚úÖ EXPLICITAMENTE RETORNAR TRUE SE ATIVO FOR TRUE OU N√ÉO ESTIVER DEFINIDO
    const isActive = data.ativo !== false;
    console.log('Status final:', isActive);
    return isActive;
    
  } catch (error) {
    // ‚úÖ SE FOR ERRO DE ABORT (TIMEOUT)
    if (error.name === 'AbortError') {
      console.warn('Timeout na verifica√ß√£o - permitindo acesso por seguran√ßa');
      return true;
    }
    
    console.error('Erro na verifica√ß√£o:', error.message);
    
    // ‚úÖ PARA QUALQUER OUTRO ERRO, PERMITIR ACESSO
    console.warn('Permitindo acesso por seguran√ßa devido ao erro');
    return true;
  }
};

/**
 * ‚úÖ VERS√ÉO AINDA MAIS SIMPLES PARA CASOS N√ÉO CR√çTICOS
 * @param {string} userId - ID do usu√°rio a ser verificado
 * @returns {Promise<boolean>} - true se ativo, false caso contr√°rio
 */
export const isUserActiveSimple = async (userId) => {
  try {
    if (!userId) return true;
    
    console.log("Verifica√ß√£o simples de status de usu√°rio:", userId.substring(0, 8));
    
    // ‚úÖ TIMEOUT AINDA MENOR PARA VERIFICA√á√ÉO SIMPLES
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 segundos
    
    const { data, error } = await supabase
      .from('usuarios')
      .select('ativo')
      .eq('id', userId)
      .abortSignal(controller.signal)
      .single();
    
    clearTimeout(timeoutId);
      
    if (error) {
      console.warn('Erro na verifica√ß√£o simples, permitindo acesso:', error.message);
      return true;
    }
    
    console.log("Status simples:", data?.ativo);
    return data?.ativo !== false;
    
  } catch (error) {
    console.warn('Erro na verifica√ß√£o simples, permitindo acesso:', error.message);
    return true;
  }
};

/**
 * ‚úÖ DESATIVA UM USU√ÅRIO NO SISTEMA
 * @param {string} userId - ID do usu√°rio a ser desativado
 * @returns {Promise<boolean>} - true se sucesso, false caso contr√°rio
 */
export const deactivateUser = async (userId) => {
  try {
    console.log(`Tentando desativar usu√°rio: ${userId.substring(0, 8)}`);
    
    const { data, error } = await supabase
      .from('usuarios')
      .update({ ativo: false })
      .eq('id', userId)
      .select();
      
    if (error) {
      console.error('Erro ao desativar usu√°rio:', error);
      return false;
    }
    
    // ‚úÖ LIMPAR CACHE PARA ESTE USU√ÅRIO
    userStatusCache.delete(userId);
    console.log('Usu√°rio desativado com sucesso');
    
    return true;
  } catch (error) {
    console.error('Falha ao desativar usu√°rio:', error);
    return false;
  }
};

/**
 * ‚úÖ REATIVA UM USU√ÅRIO NO SISTEMA
 * @param {string} userId - ID do usu√°rio a ser reativado
 * @returns {Promise<boolean>} - true se sucesso, false caso contr√°rio
 */
export const activateUser = async (userId) => {
  try {
    console.log(`Tentando ativar usu√°rio: ${userId.substring(0, 8)}`);
    
    const { data, error } = await supabase
      .from('usuarios')
      .update({ ativo: true })
      .eq('id', userId)
      .select();
      
    if (error) {
      console.error('Erro ao reativar usu√°rio:', error);
      return false;
    }
    
    // ‚úÖ LIMPAR CACHE PARA ESTE USU√ÅRIO
    userStatusCache.delete(userId);
    console.log('Usu√°rio ativado com sucesso');
    
    return true;
  } catch (error) {
    console.error('Falha ao reativar usu√°rio:', error);
    return false;
  }
};

/**
 * ‚úÖ VERIFICA SE UM USU√ÅRIO √â ADMINISTRADOR
 * @param {string} userId - ID do usu√°rio a ser verificado
 * @returns {Promise<boolean>} - true se for admin, false caso contr√°rio
 */
export const isUserAdmin = async (userId) => {
  try {
    if (!userId) return false;
    
    // ‚úÖ USAR CACHE TAMB√âM PARA ADMIN STATUS
    const cacheKey = `admin_${userId}`;
    const cached = userStatusCache.get(cacheKey);
    if (cached && (Date.now() - cached.timestamp) < 300000) { // Cache por 5 minutos
      return cached.status;
    }
    
    console.log("Verificando status de admin:", userId.substring(0, 8));
    
    const { data, error } = await supabase
      .from('usuarios')
      .select('admin')
      .eq('id', userId)
      .single();
      
    if (error) {
      console.error('Erro ao verificar status de admin:', error);
      return false;
    }
    
    const isAdmin = data?.admin === true;
    
    // ‚úÖ SALVAR NO CACHE
    userStatusCache.set(cacheKey, {
      status: isAdmin,
      timestamp: Date.now()
    });
    
    console.log('Status de admin:', isAdmin);
    return isAdmin;
  } catch (error) {
    console.error('Falha ao verificar status de admin:', error);
    return false;
  }
};

// ========================================
// ‚úÖ NOVAS FUN√á√ïES PARA GEST√ÉO DE PERMISS√ïES
// ========================================

/**
 * ‚úÖ VERIFICA SE O USU√ÅRIO √â GESTOR
 * @param {string} userId - ID do usu√°rio a ser verificado
 * @returns {Promise<boolean>} - true se for gestor, false caso contr√°rio
 */
export const isUserGestor = async (userId) => {
  try {
    if (!userId) return false;
    
    const cacheKey = `gestor_${userId}`;
    const cached = userStatusCache.get(cacheKey);
    if (cached && (Date.now() - cached.timestamp) < 300000) { // Cache por 5 minutos
      return cached.status;
    }
    
    console.log("Verificando status de gestor:", userId.substring(0, 8));
    
    const { data, error } = await supabase
      .from('usuarios')
      .select('gestor')
      .eq('id', userId)
      .single();
      
    if (error) {
      console.error('Erro ao verificar status de gestor:', error);
      return false;
    }
    
    const isGestor = data?.gestor === true;
    
    // ‚úÖ SALVAR NO CACHE
    userStatusCache.set(cacheKey, {
      status: isGestor,
      timestamp: Date.now()
    });
    
    console.log('Status de gestor:', isGestor);
    return isGestor;
  } catch (error) {
    console.error('Falha ao verificar status de gestor:', error);
    return false;
  }
};

/**
 * ‚úÖ VERIFICA SE O USU√ÅRIO TEM PERMISS√ïES ADMINISTRATIVAS (admin OU gestor)
 * Esta √© a fun√ß√£o principal para verificar acesso √†s p√°ginas de gest√£o
 * @param {Object} user - Objeto do usu√°rio (com dados j√° carregados)
 * @returns {boolean} - true se tem permiss√µes, false caso contr√°rio
 */
export const hasAdminPermissions = (user) => {
  if (!user) {
    console.log('‚ùå Usu√°rio n√£o existe');
    return false;
  }
  
  console.log('üîç Verificando permiss√µes administrativas:', {
    userId: user.id?.substring(0, 8),
    admin: user.admin,
    gestor: user.gestor,
    adminType: typeof user.admin,
    gestorType: typeof user.gestor
  });

  // ‚úÖ VERIFICA√á√ÉO FLEX√çVEL PARA DIFERENTES TIPOS DE DADOS
  const isAdmin = user.admin === true || user.admin === 'true' || user.admin === 1;
  const isGestor = user.gestor === true || user.gestor === 'true' || user.gestor === 1;
  
  const hasPermissions = isAdmin || isGestor;
  
  console.log('‚úÖ Resultado da verifica√ß√£o:', {
    isAdmin,
    isGestor,
    hasPermissions
  });

  return hasPermissions;
};

/**
 * ‚úÖ VERIFICA SE O USU√ÅRIO √â APENAS ADMIN (n√£o gestor)
 * @param {Object} user - Objeto do usu√°rio
 * @returns {boolean} - true se for apenas admin
 */
export const isOnlyAdmin = (user) => {
  if (!user) return false;
  
  const isAdmin = user.admin === true || user.admin === 'true' || user.admin === 1;
  const isGestor = user.gestor === true || user.gestor === 'true' || user.gestor === 1;
  
  return isAdmin && !isGestor;
};

/**
 * ‚úÖ VERIFICA SE O USU√ÅRIO √â APENAS GESTOR (n√£o admin)
 * @param {Object} user - Objeto do usu√°rio
 * @returns {boolean} - true se for apenas gestor
 */
export const isOnlyGestor = (user) => {
  if (!user) return false;
  
  const isAdmin = user.admin === true || user.admin === 'true' || user.admin === 1;
  const isGestor = user.gestor === true || user.gestor === 'true' || user.gestor === 1;
  
  return isGestor && !isAdmin;
};

/**
 * ‚úÖ OBTER DADOS COMPLETOS DO USU√ÅRIO DO SUPABASE
 * @param {string} userId - ID do usu√°rio
 * @returns {Promise<Object|null>} - Dados completos do usu√°rio ou null
 */
export const getUserCompleteData = async (userId) => {
  try {
    if (!userId) return null;
    
    const cacheKey = `complete_${userId}`;
    const cached = userStatusCache.get(cacheKey);
    if (cached && (Date.now() - cached.timestamp) < 180000) { // Cache por 3 minutos
      return cached.status;
    }
    
    console.log("Buscando dados completos do usu√°rio:", userId.substring(0, 8));
    
    const { data, error } = await supabase
      .from('usuarios')
      .select('*')
      .eq('id', userId)
      .single();

    if (error) {
      console.error('Erro ao buscar dados completos do usu√°rio:', error);
      return null;
    }
    
    // ‚úÖ SALVAR NO CACHE
    userStatusCache.set(cacheKey, {
      status: data,
      timestamp: Date.now()
    });

    return data;
  } catch (error) {
    console.error('Erro na busca de dados completos:', error);
    return null;
  }
};

/**
 * ‚úÖ VERIFICAR SE O USU√ÅRIO TEM ACESSO A UM PROJETO ESPEC√çFICO
 * @param {string} userId - ID do usu√°rio
 * @param {string} projectId - ID do projeto
 * @returns {Promise<boolean>} - true se tem acesso
 */
export const hasProjectAccess = async (userId, projectId) => {
  try {
    if (!userId || !projectId) return false;
    
    // ‚úÖ VERIFICAR SE √â ADMIN (tem acesso a tudo)
    const userData = await getUserCompleteData(userId);
    if (userData?.admin === true) {
      console.log('‚úÖ Usu√°rio √© admin, tem acesso a todos os projetos');
      return true;
    }

    // ‚úÖ SE N√ÉO √â ADMIN, VERIFICAR SE EST√Å VINCULADO AO PROJETO
    const { data, error } = await supabase
      .from('relacao_usuarios_projetos')
      .select('id')
      .eq('usuario_id', userId)
      .eq('projeto_id', projectId)
      .single();

    if (error && error.code !== 'PGRST116') { // PGRST116 = n√£o encontrado
      console.error('Erro ao verificar acesso ao projeto:', error);
      return false;
    }

    const hasAccess = !!data;
    console.log(`${hasAccess ? '‚úÖ' : '‚ùå'} Acesso ao projeto:`, projectId.substring(0, 8));
    return hasAccess;
  } catch (error) {
    console.error('Erro na verifica√ß√£o de acesso ao projeto:', error);
    return false;
  }
};

/**
 * ‚úÖ OBTER LISTA DE PROJETOS QUE O USU√ÅRIO TEM ACESSO
 * @param {string} userId - ID do usu√°rio
 * @returns {Promise<Array>} - Lista de projetos
 */
export const getUserProjects = async (userId) => {
  try {
    if (!userId) return [];
    
    // ‚úÖ VERIFICAR SE √â ADMIN
    const userData = await getUserCompleteData(userId);
    if (userData?.admin === true) {
      console.log('‚úÖ Admin detectado, carregando todos os projetos');
      
      // ‚úÖ ADMIN TEM ACESSO A TODOS OS PROJETOS
      const { data, error } = await supabase
        .from('projetos')
        .select('*')
        .order('nome');

      if (error) throw error;
      
      console.log(`‚úÖ ${data.length} projetos carregados (admin)`);
      return data;
    }

    // ‚úÖ SE N√ÉO √â ADMIN, BUSCAR APENAS PROJETOS VINCULADOS
    console.log('üë§ Usu√°rio n√£o-admin, carregando projetos vinculados');
    
    const { data, error } = await supabase
      .from('relacao_usuarios_projetos')
      .select(`
        projeto_id,
        projetos (*)
      `)
      .eq('usuario_id', userId);

    if (error) throw error;

    const projetos = data.map(rel => rel.projetos).filter(p => p !== null);
    console.log(`‚úÖ ${projetos.length} projetos vinculados carregados`);
    return projetos;
  } catch (error) {
    console.error('Erro ao buscar projetos do usu√°rio:', error);
    return [];
  }
};

/**
 * ‚úÖ FUN√á√ÉO DE DEBUG PARA VERIFICAR DADOS DO USU√ÅRIO
 * @param {Object} user - Objeto do usu√°rio
 * @returns {Object} - Retorna o pr√≥prio usu√°rio (para chain)
 */
export const debugUserData = (user) => {
  console.log('=== DEBUG USER DATA ===');
  console.log('User object:', user);
  console.log('Has user:', !!user);
  
  if (user) {
    console.log('User ID:', user.id);
    console.log('Email:', user.email);
    console.log('Nome:', user.nome);
    console.log('Admin:', user.admin, '(type:', typeof user.admin, ')');
    console.log('Gestor:', user.gestor, '(type:', typeof user.gestor, ')');
    console.log('Ativo:', user.ativo, '(type:', typeof user.ativo, ')');
    console.log('Has admin permissions:', hasAdminPermissions(user));
    console.log('Is only admin:', isOnlyAdmin(user));
    console.log('Is only gestor:', isOnlyGestor(user));
  }
  
  console.log('=====================');
  return user;
};

/**
 * ‚úÖ PROMOVER USU√ÅRIO A GESTOR
 * @param {string} userId - ID do usu√°rio
 * @returns {Promise<boolean>} - true se sucesso
 */
export const promoteToGestor = async (userId) => {
  try {
    console.log(`Promovendo usu√°rio a gestor: ${userId.substring(0, 8)}`);
    
    const { data, error } = await supabase
      .from('usuarios')
      .update({ gestor: true })
      .eq('id', userId)
      .select();
      
    if (error) {
      console.error('Erro ao promover usu√°rio a gestor:', error);
      return false;
    }
    
    // ‚úÖ LIMPAR CACHE
    userStatusCache.delete(`gestor_${userId}`);
    userStatusCache.delete(`complete_${userId}`);
    
    console.log('Usu√°rio promovido a gestor com sucesso');
    return true;
  } catch (error) {
    console.error('Falha ao promover usu√°rio a gestor:', error);
    return false;
  }
};

/**
 * ‚úÖ REMOVER PRIVIL√âGIOS DE GESTOR
 * @param {string} userId - ID do usu√°rio
 * @returns {Promise<boolean>} - true se sucesso
 */
export const removeGestorPrivileges = async (userId) => {
  try {
    console.log(`Removendo privil√©gios de gestor: ${userId.substring(0, 8)}`);
    
    const { data, error } = await supabase
      .from('usuarios')
      .update({ gestor: false })
      .eq('id', userId)
      .select();
      
    if (error) {
      console.error('Erro ao remover privil√©gios de gestor:', error);
      return false;
    }
    
    // ‚úÖ LIMPAR CACHE
    userStatusCache.delete(`gestor_${userId}`);
    userStatusCache.delete(`complete_${userId}`);
    
    console.log('Privil√©gios de gestor removidos com sucesso');
    return true;
  } catch (error) {
    console.error('Falha ao remover privil√©gios de gestor:', error);
    return false;
  }
};

// ‚úÖ LIMPEZA PERI√ìDICA DO CACHE (A CADA 10 MINUTOS)
if (typeof window !== 'undefined') {
  setInterval(() => {
    const now = Date.now();
    let cleanedCount = 0;
    
    for (const [key, value] of userStatusCache.entries()) {
      // ‚úÖ REMOVER ENTRADAS COM MAIS DE 10 MINUTOS
      if (now - value.timestamp > 600000) {
        userStatusCache.delete(key);
        cleanedCount++;
      }
    }
    
    if (cleanedCount > 0) {
      console.log(`Cache limpo: ${cleanedCount} entradas removidas`);
    }
  }, 600000); // 10 minutos
}